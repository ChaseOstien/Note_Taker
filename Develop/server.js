const express = require("express"); //This line imports express into this project. 
const path = require("path"); // This line imports the path module into this file. This allows you to work with directories and file paths.
const fs = require('fs'); // This imports the file system module from node, allowing you to manipulate files, indluding reading and writing. 
const jsonData = require("./db/db.json"); // This line imports the data base file in this directory. 
const uuid = require("./helpers/uuid"); // This line imports the uuid helper file which is used to generate and assign uuids to each note. 
const { readFromFile, readAndAppend } = require('./helpers/fsUtils'); // This line imports the fsUtils file which contains our file manipulation functions. 

const PORT = 3001; // This line assigns the server port we want to work with. 

const app = express(); // This line creates a new instance of an express application in this project.  

app.use(express.json()); // app refers to the instance of express that we created, .use() is used to set up middleware functions that will be executed on incoming HTTP requests. express.json() is a built in middleware function provided by express that is used to parse JSON data in incoming requests. It configures express to automatically parse JSON data in the request body. It will make it available as a JavaScript object on the request object. It will take data sent in a post request body, parse it and make it available at req.body. 
app.use(express.urlencoded({ extended: true })); // This middleware is used to parse data from URL-encoded forms in incoming requests. Extended true allows you to parse complex objects. 

app.use(express.static("public")); // This middleware is set up to serve static files when you access the public directory. This allows you to serve HTML, CSS and JS files such as those in the 2 send file get requests below. 


app.get("/api/notes", (req, res) => {
    readFromFile("./db/db.json").then((data) => res.json(JSON.parse(data))); 
    console.log(`${req.method} made to get saved notes`);
    // This section of code proccesses get requests made on the api/notes route. req contains info about the request, res contains info about the response. It calls the read from file function on the db.json file and then passes the data read into a promise chain using .then. The data is then parsed using JSON.parse(data) and included in the response in res.json(). 
});

app.post("/api/notes", (req, res) => { // This section of code processes post requests made to the api/notes route of our web server. req contains info about the request and res contains info about the response. 
    console.log(`${req.method} received to update notes`);

    const { title, text } = req.body; // This line extracts the title and text properties from the req.body (incoming data in the post request).

    if (title && text) { // This line checks to see if the incoming req had both a title and text(body), if truthy, it proceeds. 

    const newNote = {
        title,
        text,
        id: uuid(),
    }; // This code creates a newNotes object containing the title and text extracted from the request. It also includes a review_id that contains a value  generated by the uuid() function. 

    //const newString = JSON.stringify(newNote); // This line converts the newNote object to a JSON string using JSON.stringify.

    readAndAppend(newNote, "./db/db.json"); // This function call appends the newNote object to the specified file. The newNote object contains the data that was extracted from the body of the post request(sent from the browser).
    

    const response = {
        body: newNote,
    }; // This code creates a response object that containts the newNote as its body property. 
    
    res.status(201).json(response); // This line sends a response to the browser if title and text were truthy containing a 201 response code and the response object sent as json. 
    } else {
        res.status(500).json("Error in updating notes!"); // This line is sent if the title or text were false, sends an error code. 
    }
});

app.get("/notes", (req, res) => {
    res.sendFile(path.join(__dirname, "/public/notes.html"));

    console.log(`${req.method} made to get notes page`);
}); // This section of code processes get requests made to the notes route. req contains info about the request, res contains info about the response. It calls the sendFile() method on the response, it creates an absolute path to the file that you want to serve. __dirname is a node.js variable that represents the current directory of the scripts file. Since server.js is in the Develop directory, you must then provide the path to the desired file from the root(Develop).

app.delete("/api/notes/:id", (req, res) => { //This defines a delete requests made to the /api/notes/:id route when the deleteNote fetch request is called to to /api/notes/:id after clicking the delete button. 
    const targetNote = req.params.id; // This line sets targetNote equal to the note id sent in the delete request.
    readFromFile("./db/db.json").then((data) => { // This reads from the db.json file and assigns the file content to the data variable. 
        const notes = JSON.parse(data); // This parses the json content in the file. 
        const index = notes.findIndex((note) => note.id === targetNote); // This finds the array index of the note who's id matches the value assigned to targetNote.
        if (index !== -1) {
            notes.splice(index, 1);
            } else {
                res.status(500).json("Error deleting note!");
            }
        // If the value assigned to index is a valid index in the data array, it will be spliced from the array, if not, an error will be returned. 

        fs.writeFile("./db/db.json", JSON.stringify(notes), "utf-8", (err) => { 
            if (err) {
                res.status(500).json("Error updating file after deleting note.")
            } else {
                res.status(204).json("File updated after deleting.");
            }
        }); // Once the target note has been deleted, writeFile takes the updated dta assigned to notes and converts it back to json format via stringify, then writes it back into the db.json file to update it. 
    });
});

app.get("*", (req, res) => {
    res.sendFile(path.join(__dirname, "/public/index.html"));

    console.log(`${req.method} recieved to get start page`);
});

app.listen(PORT, () => 
    console.log(`App listneing at http://localhost:${PORT}`)
);

